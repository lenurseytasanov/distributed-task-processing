version: "3.9"
services:
    file-processing-app:
        build:
            context: .
            dockerfile: Dockerfile
        image: file-processing-app:latest
        profiles: ["prod"]
        env_file: .env
        environment:
            - "SPRING_PROFILES_ACTIVE=prod"
        depends_on:
            postgres:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
            minio:
                condition: service_healthy
        ports:
            - 8080:8080
        networks:
            - app_network
        volumes:
            - logs:/var/log/app
    postgres:
        image: postgres:16.2-alpine
        container_name: postgres
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASS}
            POSTGRES_DB: file_processing_db
        healthcheck:
            test: pg_isready -d file_processing_db -U ${POSTGRES_USER}
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s
        ports:
            - 5432:5432
        networks:
            - app_network
        volumes:
            - postgres_data:/var/lib/postgresql/data
    rabbitmq:
        image: rabbitmq:latest
        container_name: rabbitmq
        hostname: rabbitmq
        restart: unless-stopped
        environment:
            TZ: Europe/Moscow
            RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBIT_PASS}
            RABBITMQ_DEFAULT_VHOST: vhost
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 5s
        ports:
            - 5672:5672
            - 15672:15672
        networks:
            - app_network
        volumes:
            - ./rabbitmq:/var/lib/rabbitmq
    minio:
        image: minio/minio:latest
        container_name: minio
        restart: unless-stopped
        command: server --console-address ":9001" /data/
        environment:
            MINIO_ROOT_USER: ${MINIO_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_PASS}
        healthcheck:
            test: curl -f "http://localhost:9000/minio/health/live"
            interval: 10s
            timeout: 5s
            retries: 3
        ports:
            - 9000:9000
            - 9001:9001
        networks:
            - app_network
        volumes:
            - minio_data:/data
    createbuckets:
        image: minio/mc
        container_name: create_buckets
        depends_on:
            minio:
                condition: service_healthy
        entrypoint: >
            /bin/sh -c "
            /usr/bin/mc config host add minio http://minio:9000 ${MINIO_USER} ${MINIO_PASS};
            /usr/bin/mc mb minio/default;
            exit 0;
            "
        networks:
            - app_network

volumes:
    postgres_data:
        name: postgres_data
        driver: local
    logs:
        name: logs
        driver: local
    minio_data:
        name: minio_data
        driver: local

networks:
    app_network:
        name: app_network
        driver: bridge